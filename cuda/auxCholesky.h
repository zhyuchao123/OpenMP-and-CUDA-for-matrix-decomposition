// auxiliary serial functions for supporting tiled Cholesky factorization.
// written by Peter Strazdins, May 20 for COMP4300/8300 Assignment 2
// v1.0 15/05/20

#include <string>   //std::string

/**** square tiled algorithm support functions ****/

// returns the size in bytes of a tiled array with element size eltSize
int tileArrayBufSize(size_t eltSize, int nT);

// Abuf contains space for an nT x nT tiled array, 
// AeltBuf space for an (nT*wT) x (nT*wT) array.
// A[][] holds pointers of tiles allocated from AeltBuf in col-major order
void initTileArray(char *Abuf, double *AeltBuf, int nT, int wT, double ***A);


// sets the number of decimal places to be printed by printDoubleTile() etc
void setPrintDoublePrecision(int decimalPlaces);

// pre: a stores an wT x wT array in row-major order; 
// for clean output format, entries are assumed to be in range (-10,+10)
// post: prints out a as an wT x wT array;
void printDoubleTile(int wT, double *a);


/**** tiled lower triangular matrix support functions ****/

// pre: A[i][j] has valid storage for a wT x wT array of wT x wT doubles,
//      nT = (N+wT-1)/wT
// post: A[][] holds an nT x nT tiled +ve definite lower tri. matrix, 
//       with a tile size of wT; the upper tri. tiles are zeroed
void initLowerPosDefTileArray(int seed, int N, int nT, int wT, double ***A);

// pre:  a has storage for an wT x wT array in row-major order; 0 <= i, j <= wT
// post: a[ii*wT+jj] is set to an appropriate value for the global element 
//       (i*wT+ii, j*wT+jj) for an N x N positive definite symmetric matrix 
//       (stored in the lower triangular portion).
//       Elements are random in the range [-1.0,1.0] with a seed 
//       s = s(i*wT+ii,j*wT+jj,seed); 
//       note: a suitable bias added to diagonal elements to make +ve definite
void initLowerPosDefTile(int i, int j, int seed, int N, int wT, double *a);

// post: return the approximate row norm of NxN matrices generated by 
//       initLowerPosDefTile()
double getNrmA(int N);

// prints a global nT*wT x nT*wT tiled array with tile pointers stored in A.
// Whitespace is printed for where tile pointers are null; 
// only lower tri. tiles printed. 
// For clean output format, entries are assumed to be in range (-10,+10)
void printLowerTileArray(int nT, int wT, double ***A);

/**** miscellaneous generic functions ****/

// x[0..N-1] is set to random values in [-1,1], seeded by seed 
void initVec(int seed, double *x, int N); 

// print x[0..N-1] across a line with the label name
void printVec(std::string name, double *x, int N); 

/**** result checking functions ****/

//pre:  A stores the local tiles of a global symmetric matrix stored in the
//      lower triangular array of nT x nT tiles of size wT; 
//      x and y are replicated vectors of size nT*wT
//post: y = A*x                              
void triMatVecMult(int nT, int wT, double ***A, double *x, double *y); 

//pre:  L stores the local tiles of a global lower triangular array of 
//      nT x nT tiles of size wT; 
//      y is a replicated vector of size nT*wT
//post: y = (L^-1)^T * (L^-1) * y;
void triMatVecSolve(int nT, int wT, double ***L, double *y);

/**** serial Cholesky factorization functions ****/

// CBLAS-based implementation, tiled and blocked variants
void choleskyTileCBLAS(int nT, int wT, double ***A);

void choleskyBlockCBLAS(int nT, double *A, int w);

// tiled BLAS implementation
void choleskyTile(int nT, int wT, double ***A);
